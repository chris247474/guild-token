/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { MockOracle } from "../MockOracle";

export class MockOracle__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _roundId: BigNumberish,
    _answer: BigNumberish,
    _startedAt: BigNumberish,
    _updatedAt: BigNumberish,
    _answeredInRound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockOracle> {
    return super.deploy(
      _roundId,
      _answer,
      _startedAt,
      _updatedAt,
      _answeredInRound,
      overrides || {}
    ) as Promise<MockOracle>;
  }
  getDeployTransaction(
    _roundId: BigNumberish,
    _answer: BigNumberish,
    _startedAt: BigNumberish,
    _updatedAt: BigNumberish,
    _answeredInRound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _roundId,
      _answer,
      _startedAt,
      _updatedAt,
      _answeredInRound,
      overrides || {}
    );
  }
  attach(address: string): MockOracle {
    return super.attach(address) as MockOracle;
  }
  connect(signer: Signer): MockOracle__factory {
    return super.connect(signer) as MockOracle__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockOracle {
    return new Contract(address, _abi, signerOrProvider) as MockOracle;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "_answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "_startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "_answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId_",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer_",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt_",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound_",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161022c38038061022c833981810160405260a081101561003357600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050846000806101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff16021790555083600181905550826002819055508160038190555080600460006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550505050505061013e806100ee6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806350d25bcd1461003b578063feaf968c14610059575b600080fd5b6100436100ab565b6040518082815260200191505060405180910390f35b6100616100b5565b604051808669ffffffffffffffffffff1681526020018581526020018481526020018381526020018269ffffffffffffffffffff1681526020019550505050505060405180910390f35b6000600154905090565b60008060008060008060009054906101000a900469ffffffffffffffffffff16600154600254600354600460009054906101000a900469ffffffffffffffffffff1694509450945094509450909192939456fea2646970667358221220f6c8ec7920633a17a2f445e3dcdfb8a9c63c89650767ba56d15576676e230f6d64736f6c634300060c0033";
