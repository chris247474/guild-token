/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { MerkleProver } from "../MerkleProver";

export class MerkleProver__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleProver> {
    return super.deploy(overrides || {}) as Promise<MerkleProver>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MerkleProver {
    return super.attach(address) as MerkleProver;
  }
  connect(signer: Signer): MerkleProver__factory {
    return super.connect(signer) as MerkleProver__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleProver {
    return new Contract(address, _abi, signerOrProvider) as MerkleProver;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040527ff4dbd0fb1957570029a847490cb3d731a45962072953ba7da80ff132ccd97d5160001b60809081525034801561003a57600080fd5b506080516102f861005a6000398061011e52806101dc52506102f86000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632eb4a7ab1461003b578063c029282514610059575b600080fd5b61004361011c565b6040518082815260200191505060405180910390f35b6101046004803603608081101561006f57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156100c057600080fd5b8201836020820111156100d257600080fd5b803590602001918460208302840111640100000000831117156100f457600080fd5b9091929391929390505050610140565b60405180821515815260200191505060405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b600080868686604051602001808481526020018373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018281526020019350505050604051602081830303815290604052805190602001209050610201848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050507f00000000000000000000000000000000000000000000000000000000000000008361020d565b91505095945050505050565b60008082905060005b85518110156102b457600086828151811061022d57fe5b6020026020010151905080831161027457828160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092506102a6565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b508080600101915050610216565b50838114915050939250505056fea2646970667358221220dbaedc7ef63e754b0682a7131d5a0008685e57e265b682b0843dc656285faded64736f6c634300060c0033";
