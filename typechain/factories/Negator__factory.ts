/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Negator } from "../Negator";

export class Negator__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Negator> {
    return super.deploy(overrides || {}) as Promise<Negator>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Negator {
    return super.attach(address) as Negator;
  }
  connect(signer: Signer): Negator__factory {
    return super.connect(signer) as Negator__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Negator {
    return new Contract(address, _abi, signerOrProvider) as Negator;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "int128",
        name: "outputAmt",
        type: "int128",
      },
    ],
    name: "Negated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "isSameType",
        type: "bool",
      },
    ],
    name: "SameType",
    type: "event",
  },
  {
    inputs: [],
    name: "check1e18IsUint256",
    outputs: [
      {
        internalType: "bool",
        name: "isSameType",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "negates",
    outputs: [
      {
        internalType: "int128",
        name: "outputAmt",
        type: "int128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610161806100206000396000f3fe608060405234801561001057600080fd5b50600436106100355760003560e01c8062f966531461003a578063b5c737d71461005a575b600080fd5b61004261007b565b60405180821515815260200191505060405180910390f35b6100626100e8565b6040518082600f0b815260200191505060405180910390f35b60008060009050670de0b6b3a76400009050670de0b6b3a76400008114156100a657600191506100ab565b600091505b7fa9c70932d4d2382cfad8c3b3b8cd31b94aeb47cc61207a278f25ab80f228bdc58260405180821515815260200191505060405180910390a15090565b6000600190507f3b3630a591d4dae11d9a3823335fdb0ede4f5378226ce64793b6a64c17deb7d2816040518082600f0b815260200191505060405180910390a19056fea2646970667358221220f9e0f28085a8911a44ba9d31b9b13a5acfb3d189945501a76288d4fc5d713e9a64736f6c634300060c0033";
