/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StorageInterface extends ethers.utils.Interface {
  functions: {
    "curve()": FunctionFragment;
    "decimals()": FunctionFragment;
    "derivatives(uint256)": FunctionFragment;
    "emergency()": FunctionFragment;
    "frozen()": FunctionFragment;
    "name()": FunctionFragment;
    "numeraires(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "reserves(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "whitelistedDeposited(address)": FunctionFragment;
    "whitelistingStage()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "curve", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "derivatives",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "emergency", values?: undefined): string;
  encodeFunctionData(functionFragment: "frozen", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numeraires",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistedDeposited",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistingStage",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "curve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "derivatives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emergency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numeraires", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserves", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistingStage",
    data: BytesLike
  ): Result;

  events: {};
}

export class Storage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StorageInterface;

  functions: {
    curve(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        alpha: BigNumber;
        beta: BigNumber;
        delta: BigNumber;
        epsilon: BigNumber;
        lambda: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    "curve()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        alpha: BigNumber;
        beta: BigNumber;
        delta: BigNumber;
        epsilon: BigNumber;
        lambda: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    derivatives(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "derivatives(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    emergency(overrides?: CallOverrides): Promise<[boolean]>;

    "emergency()"(overrides?: CallOverrides): Promise<[boolean]>;

    frozen(overrides?: CallOverrides): Promise<[boolean]>;

    "frozen()"(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    numeraires(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "numeraires(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "reserves(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    whitelistedDeposited(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "whitelistedDeposited(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelistingStage(overrides?: CallOverrides): Promise<[boolean]>;

    "whitelistingStage()"(overrides?: CallOverrides): Promise<[boolean]>;
  };

  curve(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      alpha: BigNumber;
      beta: BigNumber;
      delta: BigNumber;
      epsilon: BigNumber;
      lambda: BigNumber;
      totalSupply: BigNumber;
    }
  >;

  "curve()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      alpha: BigNumber;
      beta: BigNumber;
      delta: BigNumber;
      epsilon: BigNumber;
      lambda: BigNumber;
      totalSupply: BigNumber;
    }
  >;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  derivatives(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "derivatives(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  emergency(overrides?: CallOverrides): Promise<boolean>;

  "emergency()"(overrides?: CallOverrides): Promise<boolean>;

  frozen(overrides?: CallOverrides): Promise<boolean>;

  "frozen()"(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  numeraires(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "numeraires(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "reserves(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  whitelistedDeposited(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "whitelistedDeposited(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whitelistingStage(overrides?: CallOverrides): Promise<boolean>;

  "whitelistingStage()"(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    curve(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        alpha: BigNumber;
        beta: BigNumber;
        delta: BigNumber;
        epsilon: BigNumber;
        lambda: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    "curve()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        alpha: BigNumber;
        beta: BigNumber;
        delta: BigNumber;
        epsilon: BigNumber;
        lambda: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    derivatives(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "derivatives(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    emergency(overrides?: CallOverrides): Promise<boolean>;

    "emergency()"(overrides?: CallOverrides): Promise<boolean>;

    frozen(overrides?: CallOverrides): Promise<boolean>;

    "frozen()"(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    numeraires(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "numeraires(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "reserves(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    whitelistedDeposited(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistedDeposited(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistingStage(overrides?: CallOverrides): Promise<boolean>;

    "whitelistingStage()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    curve(overrides?: CallOverrides): Promise<BigNumber>;

    "curve()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    derivatives(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "derivatives(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergency(overrides?: CallOverrides): Promise<BigNumber>;

    "emergency()"(overrides?: CallOverrides): Promise<BigNumber>;

    frozen(overrides?: CallOverrides): Promise<BigNumber>;

    "frozen()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    numeraires(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numeraires(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "reserves(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedDeposited(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistedDeposited(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistingStage(overrides?: CallOverrides): Promise<BigNumber>;

    "whitelistingStage()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    curve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "curve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    derivatives(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "derivatives(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "emergency()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    frozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "frozen()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numeraires(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numeraires(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserves(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reserves(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedDeposited(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistedDeposited(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistingStage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "whitelistingStage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
